PROGRAM PageDraw WITH Draw;
PROGRAM PageRefresh WITH Refresh;

	(***************************)
	(*                         *)
	(*     GLOBAL VARIABLES    *)
	(*                         *)
	(***************************)

VAR_GLOBAL

	{G:"Call stack"}
	giStackPtr : INT := -1;
	guiCallStack : ARRAY[ 0..9 ] OF UINT;

	{G:"Back buffer"}
	$giBackBufferCurr : INT := -1;
	$giBackBufferFirst : INT := -1;
	$giBackBufferLast : INT := -1;
	$guiBackBuffer : ARRAY[ 0..9 ] OF UINT;

	{G:"Sets"}
	$PagIndex : UINT;
	$PagNumber : UINT;
	$SetItemNumber : UINT;
	$waitRefresh : BOOL;

	{G:"SETUP_PR2_vars"}
	fbSETUP_PR2 : DrawSETUP_PR2;
	fbRefrSETUP_PR2 : RefrSETUP_PR2;
	fbSETUP_PR2String_19 : Static01 := (x:=2, y:=18, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00001, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_PR2String_20 : Static01 := (wHnd:=1, x:=2, y:=29, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00002, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_PR2Edit_21 : EditBox01 := (wHnd:=2, x1:=95, y1:=17, x2:=124, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#00400200, order:=8, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, format:=16#0000000C, pCanSel:=1);
	fbSETUP_PR2Edit_22 : EditBox01 := (wHnd:=3, x1:=95, y1:=28, x2:=124, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#00400300, order:=9, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, format:=16#0000000C, pCanSel:=1);

	{G:"SETUP_PR1_vars"}
	fbSETUP_PR1 : DrawSETUP_PR1;
	fbRefrSETUP_PR1 : RefrSETUP_PR1;
	fbSETUP_PR1String_1 : Static01 := (wHnd:=4, x:=2, y:=18, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00003, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=17);
	fbSETUP_PR1String_3 : Static01 := (wHnd:=5, x:=2, y:=29, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00004, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=17);
	fbSETUP_PR1String_19 : Static01 := (wHnd:=6, x:=2, y:=40, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00005, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=15);
	fbSETUP_PR1String_20 : Static01 := (wHnd:=7, x:=2, y:=51, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00006, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=15);
	fbSETUP_PR1Edit_17 : EditBox01 := (wHnd:=8, x1:=107, y1:=17, x2:=124, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#00400000, order:=6, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbSETUP_PR1Edit_18 : EditBox01 := (wHnd:=9, x1:=107, y1:=28, x2:=124, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#00400100, order:=7, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbSETUP_PR1Edit_21 : EditBox01 := (wHnd:=10, x1:=95, y1:=39, x2:=124, y2:=46, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#00400600, order:=8, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbSETUP_PR1Edit_22 : EditBox01 := (wHnd:=11, x1:=95, y1:=51, x2:=124, y2:=58, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#00400700, order:=9, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);

	{G:"SETUP_RS2_vars"}
	fbSETUP_RS2 : DrawSETUP_RS2;
	fbRefrSETUP_RS2 : RefrSETUP_RS2;
	fbSETUP_RS2String_1 : Static01 := (wHnd:=12, x:=3, y:=17, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00007, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS2String_3 : Static01 := (wHnd:=13, x:=3, y:=30, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00008, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=7);
	fbSETUP_RS2String_5 : Static01 := (wHnd:=14, x:=2, y:=41, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00009, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS2String_7 : Static01 := (wHnd:=15, x:=2, y:=54, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00010, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS2String_9 : Static01 := (wHnd:=16, x:=74, y:=17, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00011, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS2String_11 : Static01 := (wHnd:=17, x:=73, y:=30, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00012, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS2Edit_12 : EditBox01 := (wHnd:=18, x1:=50, y1:=17, x2:=67, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003D9E00, order:=1, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS2Edit_13 : EditBox01 := (wHnd:=19, x1:=106, y1:=17, x2:=123, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003D9F00, order:=2, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMin:=2, pVarMax:=4, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS2Edit_14 : EditBox01 := (wHnd:=20, x1:=50, y1:=29, x2:=67, y2:=36, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DA000, order:=3, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMin:=8, pVarMax:=8, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS2Edit_15 : EditBox01 := (wHnd:=21, x1:=50, y1:=41, x2:=67, y2:=48, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DA100, order:=4, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMin:=1, pVarMax:=2, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS2Edit_16 : EditBox01 := (wHnd:=22, x1:=50, y1:=53, x2:=67, y2:=60, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DA200, order:=5, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=2, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS2Edit_17 : EditBox01 := (wHnd:=23, x1:=106, y1:=29, x2:=123, y2:=36, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DA300, order:=6, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=5, format:=16#0001400C, pCanSel:=1);

	{G:"Pressure_page_vars"}
	fbPressure_page : DrawPressure_page;
	fbRefrPressure_page : RefrPressure_page;
	fbPressure_pageString_1 : Static01 := (wHnd:=24, x:=2, y:=16, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00013, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbPressure_pageString_3 : Static01 := (wHnd:=25, x:=2, y:=27, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00014, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbPressure_pageString_5 : Static01 := (wHnd:=26, x:=1, y:=38, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00015, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbPressure_pageString_7 : Static01 := (wHnd:=27, x:=2, y:=50, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00016, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbPressure_pageEdit_8 : EditBox01 := (wHnd:=28, x1:=46, y1:=50, x2:=69, y2:=57, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, bordCol:=16777215, pVar:=16#00230300, order:=4, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbPressure_pageEdit_9 : EditBox01 := (wHnd:=29, x1:=78, y1:=16, x2:=125, y2:=23, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, bordCol:=16777215, pVar:=16#00230000, order:=5, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbPressure_pageEdit_10 : EditBox01 := (wHnd:=30, x1:=78, y1:=26, x2:=125, y2:=33, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, bordCol:=16777215, pVar:=16#00230100, order:=6, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbPressure_pageEdit_11 : EditBox01 := (wHnd:=31, x1:=79, y1:=38, x2:=126, y2:=45, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, bordCol:=16777215, pVar:=16#00230700, order:=7, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);
	fbPressure_pageEdit_12 : EditBox01 := (wHnd:=32, x1:=94, y1:=50, x2:=123, y2:=57, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, bordCol:=16777215, pVar:=16#00230400, order:=8, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyInt, format:=16#0000000C, pCanSel:=1);

	{G:"Menu_vars"}
	fbMenu : DrawMenu;
	fbRefrMenu : RefrMenu;
	fbMenuButton_1 : Button02 := (wHnd:=33, x1:=6, y1:=22, x2:=120, y2:=37, pFont:=?EWP2_6x8, pText:=?kStr00017, pSelText:=?kStr00017, format:=16#0020, bordPts:=2, fillCol:=16777215, order:=1, bordSelCol:=16777215, pVisVar:=1);
	fbMenuButton_2 : Button02 := (wHnd:=34, x1:=6, y1:=43, x2:=120, y2:=58, pFont:=?EWP2_6x8, pText:=?kStr00018, pSelText:=?kStr00018, format:=16#0020, bordPts:=2, fillCol:=16777215, order:=2, bordSelCol:=16777215, pVisVar:=1);

	{G:"WELCOME_PAGE_vars"}
	fbWELCOME_PAGE : DrawWELCOME_PAGE;
	fbRefrWELCOME_PAGE : RefrWELCOME_PAGE;
	fbWELCOME_PAGEImage_1 : Image := (wHnd:=35, x1:=47, y1:=18, dx:=40, dy:=40, floating:=TRUE, bordPts:=1, pBmp:=?Bmplogo, pVisVar:=1);

	{G:"SETUP_IP_vars"}
	fbSETUP_IP : DrawSETUP_IP;
	fbRefrSETUP_IP : RefrSETUP_IP;
	fbSETUP_IPString_1 : Static01 := (wHnd:=36, x:=2, y:=17, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00019, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_IPString_6 : Static01 := (wHnd:=37, x:=2, y:=28, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00020, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_IPString_11 : Static01 := (wHnd:=38, x:=2, y:=39, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00021, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_IPString_16 : Static01 := (wHnd:=39, x:=2, y:=49, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00022, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_IPEdit_2 : EditBox01 := (wHnd:=40, x1:=44, y1:=17, x2:=61, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DB600, order:=1, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_3 : EditBox01 := (wHnd:=41, x1:=65, y1:=17, x2:=82, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DB700, order:=2, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_4 : EditBox01 := (wHnd:=42, x1:=86, y1:=17, x2:=103, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DB800, order:=3, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_5 : EditBox01 := (wHnd:=43, x1:=107, y1:=17, x2:=124, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DB900, order:=4, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_7 : EditBox01 := (wHnd:=44, x1:=44, y1:=28, x2:=61, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DBA00, order:=5, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_8 : EditBox01 := (wHnd:=45, x1:=65, y1:=28, x2:=82, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DBB00, order:=6, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_9 : EditBox01 := (wHnd:=46, x1:=86, y1:=28, x2:=103, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DBC00, order:=7, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_10 : EditBox01 := (wHnd:=47, x1:=107, y1:=28, x2:=124, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DBD00, order:=8, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_12 : EditBox01 := (wHnd:=48, x1:=44, y1:=39, x2:=61, y2:=46, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DBE00, order:=9, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_13 : EditBox01 := (wHnd:=49, x1:=65, y1:=39, x2:=82, y2:=46, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DBF00, order:=10, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_14 : EditBox01 := (wHnd:=50, x1:=86, y1:=39, x2:=103, y2:=46, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DC000, order:=11, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_15 : EditBox01 := (wHnd:=51, x1:=107, y1:=39, x2:=124, y2:=46, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DC100, order:=12, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_17 : EditBox01 := (wHnd:=52, x1:=44, y1:=50, x2:=61, y2:=57, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DC200, order:=13, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_18 : EditBox01 := (wHnd:=53, x1:=65, y1:=50, x2:=82, y2:=57, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DC300, order:=14, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_19 : EditBox01 := (wHnd:=54, x1:=86, y1:=50, x2:=103, y2:=57, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DC400, order:=15, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_IPEdit_20 : EditBox01 := (wHnd:=55, x1:=107, y1:=50, x2:=124, y2:=57, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003DC500, order:=16, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);

	{G:"SETUP_vars"}
	fbSETUP : DrawSETUP;
	fbRefrSETUP : RefrSETUP;
	fbSETUPButton_1 : Button02 := (wHnd:=56, x1:=3, y1:=16, x2:=55, y2:=25, pFont:=?EWP2_6x8, pText:=?kStr00023, pSelText:=?kStr00024, format:=16#0020, bordPts:=1, fillCol:=16777215, order:=1, bordSelCol:=16777215, pVisVar:=1);
	fbSETUPButton_2 : Button02 := (wHnd:=57, x1:=3, y1:=29, x2:=55, y2:=38, pFont:=?EWP2_6x8, pText:=?kStr00025, pSelText:=?kStr00025, format:=16#0020, bordPts:=1, fillCol:=16777215, order:=2, bordSelCol:=16777215, pVisVar:=1);
	fbSETUPButton_3 : Button02 := (wHnd:=58, x1:=3, y1:=41, x2:=55, y2:=50, pFont:=?EWP2_6x8, pText:=?kStr00026, pSelText:=?kStr00027, format:=16#0020, bordPts:=1, fillCol:=16777215, order:=3, bordSelCol:=16777215, pVisVar:=1);
	fbSETUPButton_4 : Button02 := (wHnd:=59, x1:=3, y1:=53, x2:=55, y2:=62, pFont:=?EWP2_6x8, pText:=?kStr00028, pSelText:=?kStr00028, format:=16#0020, bordPts:=1, fillCol:=16777215, order:=4, bordSelCol:=16777215, pVisVar:=1);
	fbSETUPButton_5 : Button02 := (wHnd:=60, x1:=62, y1:=16, x2:=124, y2:=25, pFont:=?EWP2_6x8, pText:=?kStr00029, pSelText:=?kStr00029, format:=16#0020, bordPts:=1, fillCol:=16777215, order:=5, bordSelCol:=16777215, pVisVar:=1);
	fbSETUPButton_6 : Button02 := (wHnd:=61, x1:=62, y1:=29, x2:=123, y2:=38, pFont:=?EWP2_6x8, pText:=?kStr00030, pSelText:=?kStr00030, format:=16#0020, bordPts:=1, fillCol:=16777215, order:=6, bordSelCol:=16777215, pVisVar:=1);

	{G:"SETUP_RS1_vars"}
	fbSETUP_RS1 : DrawSETUP_RS1;
	fbRefrSETUP_RS1 : RefrSETUP_RS1;
	fbSETUP_RS1String_1 : Static01 := (wHnd:=62, x:=3, y:=17, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00007, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS1String_3 : Static01 := (wHnd:=63, x:=3, y:=30, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00008, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=7);
	fbSETUP_RS1String_5 : Static01 := (wHnd:=64, x:=2, y:=41, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00009, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS1String_7 : Static01 := (wHnd:=65, x:=2, y:=54, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00010, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS1String_9 : Static01 := (wHnd:=66, x:=74, y:=17, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00011, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS1String_11 : Static01 := (wHnd:=67, x:=74, y:=29, pFont:=?EWP2_6x8, bckCol:=16777215, pString:=?kStr00012, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=16777215, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbSETUP_RS1Edit_2 : EditBox01 := (wHnd:=68, x1:=50, y1:=17, x2:=67, y2:=24, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003EFC00, order:=1, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=255, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS1Edit_4 : EditBox01 := (wHnd:=69, x1:=50, y1:=28, x2:=67, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003EFE00, order:=2, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMin:=8, pVarMax:=8, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS1Edit_6 : EditBox01 := (wHnd:=70, x1:=50, y1:=40, x2:=67, y2:=47, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003EFF00, order:=3, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMin:=1, pVarMax:=2, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS1Edit_8 : EditBox01 := (wHnd:=71, x1:=50, y1:=53, x2:=67, y2:=60, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003F0000, order:=4, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=2, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS1Edit_10 : EditBox01 := (wHnd:=72, x1:=107, y1:=16, x2:=124, y2:=23, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003EFD00, order:=5, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMin:=2, pVarMax:=4, format:=16#0001400C, pCanSel:=1);
	fbSETUP_RS1Edit_12 : EditBox01 := (wHnd:=73, x1:=107, y1:=28, x2:=124, y2:=35, pFont:=?EWP2_6x8, bckCol:=16777215, bordPts:=1, rw:=TRUE, pVar:=16#003F0100, order:=6, pVisVar:=1, foreSelCol:=16777215, refr:=TRUE, type:=tyUInt, pVarMax:=5, format:=16#0001400C, pCanSel:=1);

	{G:"Back page manager"}
	fbBackPage : DrawBackPage;

END_VAR

	(***************************)
	(*                         *)
	(*        CONSTANTS        *)
	(*                         *)
	(***************************)

VAR_GLOBAL CONSTANT

	kStr00022 :STRING[7] := 'PrDNS:';
	kStr00020 :STRING[7] := 'DGTWY:';
	kStr00017 :STRING[49] := '$D0$97$D0$9D$D0$90$D0$A7$D0$95$D0$9D$D0$9D$D0$AF';
	kStr00015 :STRING[59] := '$D0$A2$D0$B8$D1$81$D0$BA $D0$B2 $D0$BCi$D1$81$D1$82$D0$BE:';
	kStr00007 :STRING[37] := '$D0$90$D0$B4$D1$80$D0$B5$D1$81$D0$B0';
	kStr00002 :STRING[61] := '$D0$9C$D0$B0$D0$BA$D1$81. $D1$80i$D0$B2. $D1$80$D0$B5$D0$B7:';
	kStr00024 :STRING[22] := '$D0$9D$D0$90$D0$9B IP';
	kStr00023 :STRING[3] := 'IP';
	kStr00001 :STRING[50] := '$D0$9Ci$D0$BD. $D1$80i$D0$B2. $D1$80$D0$B5$D0$B7:';
	kStr00019 :STRING[4] := 'IP:';
	kStr00028 :STRING[4] := 'CAN';
	kStr00027 :STRING[58] := '$D0$9D$D0$90$D0$9B$D0$90$D0$A8$D0$A2$D0$A3$D0$92 RS-485-2';
	kStr00016 :STRING[27] := '$D0$9F$D0$BE$D1$82i$D0$BA:';
	kStr00018 :STRING[73] := '$D0$9D$D0$90$D0$9B$D0$90$D0$A8$D0$A2$D0$A3$D0$92$D0$90$D0$9D$D0$9D$D0$AF';
	kStr00012 :STRING[31] := '$D0$A8$D0$B2$D0$B8$D0$B4$D0$BA';
	kStr00029 :STRING[56] := '$D0$9F$D0$B0$D1$80$D0$B0$D0$BC$D0$B5$D1$82$D1$80$D0$B81';
	kStr00025 :STRING[9] := 'RS-485-1';
	kStr00013 :STRING[57] := '$D0$A0$D0$B5$D0$B7$D0$B5$D1$80$D0$B2$D1$83$D0$B0$D1$801:';
	kStr00011 :STRING[25] := '$D0$9F$D1$80$D0$BE$D1$82';
	kStr00009 :STRING[32] := '$D0$A1$D1$82$D0$BE$D0$BF $D0$91';
	kStr00030 :STRING[56] := '$D0$9F$D0$B0$D1$80$D0$B0$D0$BC$D0$B5$D1$82$D1$80$D0$B82';
	kStr00026 :STRING[9] := 'RS-485-2';
	kStr00014 :STRING[57] := '$D0$A0$D0$B5$D0$B7$D0$B5$D1$80$D0$B2$D1$83$D0$B0$D1$802:';
	kStr00010 :STRING[44] := '$D0$9F$D0$B0$D1$80$D0$BDi$D1$81$D1$82$D1$8C';
	kStr00008 :STRING[33] := '$D0$9A-$D1$81$D1$82$D1$8C $D0$91';
	kStr00006 :STRING[71] := '$D0$9F$D0$BB$D0$BE$D1$89$D0$B0 $D1$80$D0$B5$D0$B7$D0$B5$D1$80$D0$B2 2:';
	kStr00005 :STRING[71] := '$D0$9F$D0$BB$D0$BE$D1$89$D0$B0 $D1$80$D0$B5$D0$B7$D0$B5$D1$80$D0$B2 1:';
	kStr00021 :STRING[7] := 'NtMsk:';
	kStr00004 :STRING[58] := '$D0$A0i$D0$B2. $D0$BFi$D0$B4$D0$B2i$D1$81$D1$83 $D0$90I2:';
	kStr00003 :STRING[58] := '$D0$A0i$D0$B2. $D0$BFi$D0$B4$D0$B2i$D1$81$D1$83 $D0$90I1:';

END_VAR
VAR_GLOBAL CONSTANT

	{G:"Fonts"}
	EWP2_6x8_len : USINT := 6;
	EWP2_6x8_hei : USINT := 8;
	EWP2_6x8_offs : USINT := 0;
	EWP2_6x8 : ARRAY[ 0..1733 ] OF BYTE := 0,6,8,0,216,1,0,32,0,33,0,34,0,35,0,36,
				0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,
				0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,
				0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,
				0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,
				0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,
				0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,
				0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,
				0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,
				0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,
				0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,
				0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,
				0,125,0,126,0,127,0,161,0,176,0,191,0,196,0,199,
				0,214,0,220,0,223,0,224,0,225,0,228,0,231,0,232,
				0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,241,
				0,242,0,243,0,244,0,246,0,249,0,250,0,251,0,252,
				1,30,1,48,1,94,4,48,4,49,4,50,4,51,4,52,
				4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,
				4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,
				4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,
				4,77,4,78,4,79,4,16,4,17,4,18,4,19,4,20,
				4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,
				4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,
				4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,
				4,45,4,46,4,47,1,31,1,49,1,95,0,205,0,227,
				0,226,0,195,0,194,0,193,0,192,0,201,0,200,0,211,
				0,213,0,245,0,218,0,209,0,202,0,204,4,6,4,7,
				4,86,4,87,32,172,9(0),79,4(0),7,0,7,0,0,20,127,
				20,127,20,0,36,42,127,42,18,35,19,8,100,98,0,0,
				54,73,85,34,80,0,0,5,3,4(0),28,34,65,3(0),65,34,
				28,0,0,20,8,62,8,20,0,8,8,62,8,8,0,0,
				80,48,0,0,5(8),3(0),96,96,0,0,32,16,8,4,2,0,
				62,81,73,69,62,0,0,66,127,64,0,0,66,97,81,73,
				70,0,33,65,69,75,49,0,24,20,18,127,16,0,39,3(69),
				57,0,60,74,73,73,49,0,1,113,9,5,3,0,54,3(73),
				54,0,6,73,73,41,30,0,0,54,54,4(0),86,54,3(0),8,
				20,34,65,0,0,5(20),0,0,65,34,20,8,0,2,1,81,
				9,6,0,50,73,121,65,62,0,126,3(17),126,0,127,3(73),54,
				0,62,3(65),34,0,127,65,65,34,28,0,127,3(73),65,0,127,
				3(9),1,0,62,65,73,73,122,0,127,3(8),127,0,0,65,127,
				65,0,0,32,64,65,63,1,0,127,8,20,34,65,0,127,
				4(64),0,127,2,12,2,127,0,127,4,8,16,127,0,62,3(65),
				62,0,127,3(9),6,0,62,65,81,33,94,0,127,9,25,41,
				70,0,70,3(73),49,0,1,1,127,1,1,0,63,3(64),63,0,
				31,32,64,32,31,0,63,64,56,64,63,0,99,20,8,20,
				99,0,7,8,112,8,7,0,97,81,73,69,67,0,0,127,
				65,65,0,0,2,4,8,16,32,0,0,65,65,127,0,0,
				4,2,1,2,4,0,5(64),0,0,1,2,4,0,0,32,3(84),
				120,0,127,72,68,68,56,0,56,3(68),32,0,48,72,72,80,
				127,0,56,3(84),24,0,8,126,9,1,2,0,12,3(82),62,0,
				127,8,4,4,120,0,0,68,125,64,0,0,32,64,68,61,
				0,0,127,16,40,68,3(0),65,127,64,0,0,124,4,24,4,
				120,0,124,8,4,4,120,0,56,3(68),56,0,124,3(20),8,0,
				8,20,20,24,124,0,124,8,4,4,8,0,72,3(84),32,0,
				4,63,68,64,32,0,60,64,64,32,124,0,28,32,64,32,
				28,0,60,64,48,64,60,0,68,40,16,40,68,0,12,3(80),
				60,0,68,100,84,76,68,0,0,8,54,65,4(0),119,4(0),65,
				54,8,0,0,6,1,30,32,24,0,0,9,5,251,40,3(0),
				244,3(0),6,9,9,6,3(0),96,144,138,64,0,120,37,36,37,
				120,0,30,161,225,33,18,0,60,67,66,67,60,0,60,65,
				64,65,60,0,126,33,69,74,48,0,40,85,86,120,64,0,
				34,85,84,56,64,0,41,84,84,57,64,0,24,164,228,36,
				0,0,56,85,86,88,0,0,56,84,84,90,1,0,56,86,
				85,86,24,0,56,85,84,85,24,0,0,73,122,64,4(0),122,
				1,3(0),2,121,2,3(0),1,124,1,0,0,124,10,5,6,121,
				0,56,68,68,69,58,0,56,68,70,69,56,0,48,74,73,
				74,48,0,48,74,72,74,48,0,0,56,65,66,56,64,0,
				56,66,65,56,64,56,66,65,58,64,0,56,66,64,58,64,
				0,56,69,70,85,52,3(0),125,3(0),34,165,229,37,25,0,32,
				3(84),120,0,124,84,84,32,0,0,124,84,84,40,0,0,124,
				4,4,12,0,0,96,56,36,60,96,0,56,3(84),24,0,108,
				16,124,16,108,0,40,68,84,40,0,0,124,32,16,8,124,
				0,124,33,18,9,124,0,124,16,24,100,0,0,64,56,4,
				124,0,0,124,8,16,8,124,0,124,16,16,124,0,0,56,
				68,68,56,0,0,124,4,4,124,0,0,252,36,36,24,0,
				0,56,68,68,40,0,0,4,4,124,4,4,0,76,80,48,
				12,0,0,24,36,124,36,24,0,68,40,16,40,68,0,124,
				64,64,124,128,0,12,16,16,124,0,0,124,64,120,64,124,
				0,124,64,120,64,252,0,4,124,80,80,32,0,124,80,80,
				32,124,0,124,80,80,32,0,0,68,84,84,56,0,0,124,
				16,56,68,56,0,64,40,20,20,124,0,126,3(17),126,0,127,
				3(69),57,0,127,3(73),54,0,127,3(1),3,0,96,62,33,63,96,
				0,127,3(73),65,0,119,8,127,8,119,0,34,3(73),54,0,127,
				16,8,4,127,0,127,16,9,4,127,0,127,8,22,33,65,
				0,64,62,1,1,127,0,127,2,12,2,127,0,127,3(8),127,
				0,62,3(65),62,0,127,3(1),127,0,127,3(9),6,0,62,3(65),34,
				0,1,1,127,1,1,0,71,3(72),63,0,28,34,127,34,28,
				0,99,20,8,20,99,0,127,64,64,127,192,0,7,3(8),127,
				0,127,64,127,64,127,0,127,64,127,64,255,0,1,127,72,
				72,48,0,127,72,48,0,127,0,127,3(72),48,0,34,3(73),62,
				0,127,8,62,65,62,0,70,41,25,9,127,0,24,165,166,
				165,124,0,0,68,124,64,0,0,36,170,234,42,16,0,0,
				68,126,69,0,0,34,85,86,57,64,0,32,86,85,86,120,
				0,122,37,38,37,120,0,120,38,37,38,120,0,120,36,38,
				37,120,0,120,37,38,36,120,0,124,86,85,68,0,0,124,
				85,86,68,0,0,56,68,70,69,56,0,58,69,70,69,56,
				0,52,74,76,74,48,0,60,64,66,65,60,0,124,10,17,
				34,125,0,124,86,85,70,3(0),69,126,68,3(0),66,126,126,66,
				0,0,69,124,124,69,0,0,4,125,125,3(0),5,124,125,3(0),
				124,254,170,170,130;

	{G:"Bitmaps"}
	Bmplogo : ARRAY[ 0..1602 ] OF DWORD :=
		16#00000028,		(* Bitmap size dim x *)
		16#00000028,		(* Bitmap size dim y *)
		16#00000000,		(* Transparency color *)
		18(16#00FFFFFF),16#00FEFEFD,16#00F4F0EE,16#00FCFBFA,32(16#00FFFFFF),16#00FEFEFE,16#00FAF9F7,16#00E5DCD4,16#00FFFFFF,16#00B59C87,
		16#00CEBCAE,16#00A58468,16#00B89D86,16#00BBA38E,16#00C3AE9C,16#00D2C2B5,16#00DACDC2,16#00FEFEFE,26(16#00FFFFFF),16#00EEE8E3,
		16#00CEBCAC,16#00BCA38D,16#00A88970,16#00C7B3A1,16#00A6856A,16#00C4AE9B,16#00AD9076,16#00B49982,16#00BBA28C,16#00B89F89,
		16#00B79D86,16#00B9A08A,16#00B0947B,16#00CAB6A6,16#00F8F5F3,22(16#00FFFFFF),16#00F4F0EC,16#00CCBAAB,16#00B69C86,16#00BAA28C,
		16#00B39880,16#00B29781,16#00C7B3A3,16#00E5DBD4,16#00EAE3DE,16#00E7DED6,16#00F3EFEC,16#00D3C4B8,16#00BCA390,16#00AC8E75,
		16#00AD8F76,16#00C5B1A1,16#00B59A83,16#00A18063,16#00DED3CA,20(16#00FFFFFF),16#00E4DBD3,16#00A28265,16#00DCD0C5,16#00B1947B,
		16#00E8DFD9,16#00DBCFC4,16#00E2D8CF,6(16#00FFFFFF),16#00FEFEFD,16#00F6F6F5,16#00E5E4E1,16#00C8BCAE,16#00B8A491,16#00B6A08C,
		16#00E4DDD6,16#00B1957F,19(16#00FFFFFF),16#00F5F1ED,16#00B59B84,16#00CAB6A5,16#00E9E1DB,16#00FFFFFF,16#00DFF9FD,3(16#00C7F5FC),
		2(16#00C8F5FC),2(16#00C7F5FC),16#00D7F8FD,16#00C4F5FC,2(16#006CE6F7),16#006DE6F7,16#006CB1B1,16#00718775,16#00C0A996,16#00C3AE9A,
		16#00F8F5F3,15(16#00FFFFFF),16#00FBF9F7,16#00FFFFFF,16#00AB8D77,16#00D2C2B5,16#00FFFEFE,2(16#00FFFFFF),16#00A8EAF8,2(16#0067D9F2),
		16#006DE3F6,16#005AC4EA,16#0058C2E9,2(16#006EE6F7),16#0097EDF9,16#00C5F5FC,16#006DE5F7,16#0067DDF4,16#006BE2F6,16#006BE3F6,
		16#0070D3E0,16#00BAA18D,16#00AE9178,16#00BFA894,16#00FCFBFB,13(16#00FFFFFF),16#00DCD0C5,16#00AE9178,16#00DFD3C9,16#00F7F4F2,
		16#00FEFEFE,3(16#00FFFFFF),16#008ABCE6,2(16#00358CD4),16#0066D3EF,16#0059C3E9,16#0056C1E9,16#006EE6F7,16#00DEF9FD,16#00F6FDFE,
		16#00C5F5FC,16#006AE1F5,16#003EA9E3,16#0057C8ED,16#0055C7EC,16#005DC8ED,16#00FDFDFC,16#00B89F8A,16#00BBA38D,16#00A6866B,
		12(16#00FFFFFF),16#00FDFCFC,16#00EAE3DC,16#00B59B84,16#00CBB9A9,16#00FEFEFE,4(16#00FFFFFF),16#00ACF0FA,2(16#0070E5F7),16#006EE6F7,
		16#0059C3E9,16#0056C1E9,16#006EE6F7,16#0070E6F7,16#0098EDF9,16#00C5F5FC,16#006CE4F6,16#005ACCEE,16#0057C8ED,16#0055C7EC,
		16#005DC8ED,16#00FFFFFF,16#00F5F1EE,16#00B89F8A,16#00DED2C7,16#00BFA793,16#00FCFBFA,10(16#00FFFFFF),16#00CDBBAD,16#00F4EFEB,
		16#00F7F3F1,16#00EEE8E4,5(16#00FFFFFF),16#008ABCE6,2(16#00358CD4),16#0066D3EF,16#0059C3E9,16#0056C1E9,16#006EE6F7,16#00DDF9FD,
		16#00F6FDFE,16#00C5F5FC,16#006BE1F5,16#0040ABE3,16#0057C8ED,16#0055C7EC,16#005DC8ED,2(16#00FFFFFF),16#00E2D8D0,16#00B89F89,
		16#00B2967E,16#00E6DDD6,9(16#00FFFFFF),16#00FDFCFB,16#00AF927A,16#00977252,16#00DDD1C7,6(16#00FFFFFF),16#00A8E9F7,2(16#0068D9F2),
		16#006DE3F6,16#0059C3E9,16#0056C1E9,16#006DE6F7,16#0070E6F7,16#0098EDF9,16#00C5F5FC,16#006CE4F6,16#005BCDEF,16#0057C8ED,
		16#0055C7EC,16#005DC8ED,3(16#00FFFFFF),16#00CDBCAC,16#00C4AF9F,16#00F7F4F2,11(16#00FFFFFF),16#00E1D7CE,16#00FDFCFC,6(16#00FFFFFF),
		16#0092C8EA,16#0046A1D9,16#005F8EA4,16#007B816B,16#00826644,16#008D613A,16#008C653D,16#00A1754F,16#00BF9C80,16#00B1CECA,
		16#006BE1F5,16#0042AFE5,16#005BCDEF,16#005ACCEE,16#0061CEEF,3(16#00FFFFFF),16#00FFFFFE,16#00D4C5B9,16#00F9F7F5,10(16#00FFFFFF),
		16#00FEFDFD,16#00E4DBC5,6(16#00EBE5CC),16#00EEE9D4,16#009EA9AA,16#00845A37,16#00B48C6C,16#00B9997F,16#00B0AA9E,16#00A4ABA6,
		16#00ACB7AC,16#00BCAF9D,16#00BB977B,16#00AB805C,16#00816C4A,16#0093C0B1,2(16#00A3DBCD),16#00A7DBCD,7(16#00E9E2CA),16#00F4F1E5,
		8(16#00FFFFFF),16#00FCFCFA,16#00C6B38C,5(16#00D4C69E),16#00D2C49C,16#00AA8151,16#00AA7E5A,16#00B19E90,16#0065849A,16#006BD3E7,
		16#0059C3E9,16#0056C1E9,16#006EE6F7,16#00D5F8FD,16#00E2E8E4,16#00C0A286,16#00C2A389,16#009E6A40,16#00BA9A6B,9(16#00DBD0A3),
		16#00EDE7D0,7(16#00FFFFFF),16#00FFFFFE,16#00DBCFB2,5(16#00E4DBBA),16#00E4DBB9,16#00AE855C,16#00B48D6E,16#009CA093,16#0055B0DC,
		16#0050B2E2,16#0069DAF2,16#0059C3E9,16#0056C1E9,16#006EE6F7,16#0079E8F8,16#00A0EFFA,16#00CFC0A6,16#00D3C297,16#00C3A588,
		16#00A57550,16#00B9996A,16#00DDD2A8,16#00DBCFA4,16#00DDD2A8,16#00DACFA4,16#00DDD2A7,16#00DACFA4,16#00DDD2A7,16#00DBCFA4,
		16#00EDE7D0,7(16#00FFFFFF),16#00FFFFFE,16#00D0C1A6,5(16#00D9CEAF),16#00B8996F,16#00AE8360,16#00C9AD98,16#009FDCF2,2(16#0058C4EA),
		16#006BDFF4,16#0059C3E9,16#0056C1E9,16#006EE6F7,16#00D0F7FC,16#00EAFBFE,16#00CFC0A6,16#00F9F7EE,16#00E2D8CF,16#00C5A78D,
		16#009C683C,16#00E9DDD2,16#00DDD0C4,16#00F9F7F0,16#00DCD1C6,16#00FAF8F1,16#00DDD2C7,16#00FBF9F2,16#00DDD0C0,16#00EDE7D0,
		5(16#00FFFFFF),16#00EBE5E0,16#00D4C7A6,16#00E2D9C0,16#00DACEAE,16#00DACFB1,16#00E3DBC1,16#00DAD0B0,16#00E2DAC1,16#00D9CCAC,
		16#00986235,16#00C8AC93,16#00E4DCC7,16#0091C8EA,2(16#0040A0DC),16#0067D7F1,16#0067DAF2,16#0070DBF2,16#006EE6F7,16#007CE8F8,
		16#00A3EFFA,16#00CFC0A6,16#00EEE9D5,16#00D9CDB8,16#00E2D5C1,16#00C2A289,16#00A37349,16#00DACBB7,16#00EFE9D7,16#00DACDB8,
		16#00EFE9D7,16#00DACEB9,16#00F0EAD8,16#00D9CCB5,16#00EDE7D0,6(16#00FFFFFF),16#00CAB89D,16#00F5F1EE,16#00DBCEB4,16#00DED2BF,
		16#00F9F8F1,16#00DED4BB,16#00F6F3F0,16#00BB9B71,16#00B89476,16#00DBC8B9,16#00E9E2CE,16#00ACF1FA,3(16#006EE6F7),16#0087E0E1,
		16#008AD6B4,16#0081DDCE,16#00CBF6FC,16#00E5FBFE,16#00CFC0A6,16#00EFEAD9,16#00DACEBB,16#00F0EBDD,16#00CBB198,16#00A87A54,
		16#00C7B096,16#00EFEADB,16#00DACEBA,16#00EFEADB,16#00DACFBC,16#00F0EBDC,16#00DACDB7,16#00EDE7D0,5(16#00FFFFFF),16#00E9E2DC,
		16#00D3C5A1,16#00E5DCC2,16#00DBCFAA,16#00DCD0AF,16#00E7E0C3,16#00DCD1AD,16#00E6DEC4,16#009C6A38,16#00C3A48A,16#00E8E1C6,
		16#00E0D7B4,16#00CFF0F2,3(16#00B6F2FB),16#0071C798,16#0046BE72,16#0063C688,16#00B7F2F9,16#00CAF6FC,16#00CFC0A6,16#00F9F7EE,
		16#00DCD1C6,16#00FBF9F3,16#00EADFD7,16#00BD9A7D,16#00A2754F,16#00F9F7F0,16#00DDD1C6,16#00FAF8F1,16#00DDD3C8,16#00FBF8F2,
		16#00DDD1C1,16#00EDE7D0,5(16#00FFFFFF),16#00DCD0C7,16#00D9CCA3,5(16#00DBD0A3),16#00DACEA1,16#00986131,16#00C8AE8F,2(16#00DBD0A3),
		16#00F3F0ED,2(16#00FFFFFF),16#00F8FBF9,16#0049B972,16#0046C072,16#008ACEA3,16#00D9F2E2,16#00FFFFFF,16#00CFC0A6,16#00E0D7B3,
		16#00D9CDA8,16#00E1D7B4,16#00DDD3AF,16#00BF9E83,16#00996633,16#00E0D7B3,16#00D9CDA8,16#00E0D7B3,16#00DACEA9,16#00E1D7B4,
		16#00D9CDA7,16#00ECE7D0,5(16#00FFFFFF),16#00C6B1A0,16#00F1E5D4,16#00F4EAD4,16#00F4ECDA,16#00F5EEDF,2(16#00F5EFE0),16#00F0E7D6,
		16#00A16F47,16#00CFB69F,16#00EDE7DA,16#00D0C1AB,16#00F0EAE6,16#00FEFEFD,16#00F3EFED,16#00F3F8F5,16#0043B96F,16#0044BF71,
		16#006DC38D,16#00C1EAD0,16#00FFFFFF,16#00DED3C7,16#00E2D7C9,16#00F4F1E7,16#00F4F0E6,16#00F5F1E8,16#00CFB5A2,16#009D6A3E,
		3(16#00F3ECE1),16#00F3EBDE,16#00F2E9D8,16#00F2E7D3,16#00DCC9B2,16#00E2D8D0,4(16#00FFFFFF),16#00B1957E,16#00F9ECDA,16#00FCF3E6,
		16#00FCF6EE,16#00FDF9F5,2(16#00FDF9F6),16#00F8F1EC,16#00A16F46,16#00D6BFAE,16#00E6DED6,16#00D5C5B9,16#00C0A995,16#00B89F88,
		16#00C0A993,16#00F2EFEC,16#0055BA7B,16#0044BF71,16#004BBA74,16#00D0EEDB,16#00BFA794,16#00CAB6A6,16#00C7B2A0,16#00B9A18B,
		16#00B69C85,16#00D7C8BD,16#00CFB6A3,16#009F6C43,3(16#00FDF9F6),16#00FDF8F2,16#00FCF4EA,16#00FCF1E2,16#00D6BFA6,16#00D8CBC0,
		4(16#00FFFFFF),16#00B1957E,16#00F9ECDA,16#00FCF3E5,16#00FCF6ED,16#00FDF9F4,2(16#00FDF9F6),16#00FBF7F3,16#009A6336,16#00D3BDAC,
		2(16#00FFFFFF),16#00F0EAE5,16#00C0A997,16#00E5DBD3,16#00FBFAF9,16#00A4D5B7,16#0044BF71,16#0054C47D,16#00F9FCFA,16#00E1D6CD,
		16#00BEA794,16#00E3D9D1,16#00FBFAF9,16#00FFFFFF,16#00FDFDFC,16#00C09F86,16#00AA7C56,3(16#00FDF9F6),16#00FDF7F1,16#00FCF4E9,
		16#00FCF1E2,16#00D8C2A7,16#00D8CBC0,4(16#00FFFFFF),16#00B1957E,16#00F9ECD9,16#00FCF2E4,16#00FCF5EB,16#00FDF8F4,3(16#00FDF9F6),
		16#00A77852,16#00C5A68F,16#00FDFCFC,16#00FFFFFF,16#00D6C7BA,16#00FCFBFB,16#00D3C3B6,16#00D7C8BC,16#00FBFCFB,16#0076C693,
		16#00A9E2BE,16#00DFD4C9,16#00DED2C8,16#00FEFDFD,16#00D8CABF,16#00D8C9BE,16#00FFFFFF,16#00EADED6,16#00BD9A7D,16#00C3A288,
		2(16#00FDF9F6),16#00FDF9F5,16#00FDF7EF,16#00FCF4E8,16#00FCF0E0,16#00D9C3A7,16#00D8CBC0,4(16#00FFFFFF),16#00EDE7E1,3(16#00E2D9D2),
		16#00B3977F,3(16#00FDF9F6),16#00CEB39C,16#00B79173,16#00DAC6B7,4(16#00FFFFFF),16#00E6F1EA,16#00BAE6CA,16#00DBEEE2,16#00B1E4C4,
		16#00F2EEEB,16#00DACDC1,16#00FAF9F7,3(16#00FFFFFF),16#00D1B9A6,16#00A6774F,16#00EADDD3,2(16#00FDF9F6),16#00F9F3EF,16#00B39882,
		2(16#00E2D9D2),16#00E1D8D0,16#00F6F3F1,8(16#00FFFFFF),16#00BFA793,16#00F4EDE8,2(16#00FDF9F6),16#00F8F2EE,16#009B6538,16#00C8AC96,
		16#00FAF7F5,3(16#00FFFFFF),16#00C4E1CF,16#0058C17F,16#00C8E9D4,16#00A3DBB7,16#00C3AD99,16#00E0D6CD,16#00BEA792,16#00DED2C8,
		16#00FFFFFF,16#00EBE1D9,16#00C2A289,16#00A97C57,3(16#00FDF9F6),16#00D5C3B3,16#00E5DBD3,12(16#00FFFFFF),16#00EEE8E3,16#00BEA48E,
		3(16#00FDF9F6),16#00D5BDA9,16#00AA7D58,16#00C8AC94,16#00FEFDFD,2(16#00FFFFFF),16#00BFDFCB,16#00A4DEB9,16#0081CA9C,16#00A2DFB8,
		4(16#00FFFFFF),16#00F5F0ED,16#00C9AC96,16#009C673C,16#00ECE0D6,2(16#00FDF9F6),16#00FDF9F5,16#00B79C83,16#00FFFEFE,13(16#00FFFFFF),
		16#00B3977F,16#00F5EEE9,3(16#00FDF9F6),16#00BA9577,16#00B18868,16#00C9AD96,16#00F6F1ED,16#00FFFFFF,16#00DBEBE2,16#0055C27D,
		16#00BFE2CD,16#009CDCB4,3(16#00FFFFFF),16#00EBE0D7,16#00C8AC96,16#00A3714A,16#00D5BEAA,3(16#00FDF9F6),16#00E0D2C5,16#00D0BFB0,
		14(16#00FFFFFF),16#00EAE2DC,16#00F5EEE6,3(16#00FDF9F6),16#00FCF8F5,16#00BF9C80,16#00A5754E,16#00C5A78E,16#00D3BDAC,16#00F2EDE9,
		16#0066C188,16#0071CB92,16#0096D4AD,16#00FEFEFE,16#00ECE1DA,16#00D1B9A6,16#00C3A38B,16#009C683D,16#00D6BFAC,3(16#00FDF9F6),
		16#00FDF9F4,16#00ECE1D6,16#00FBF9F6,13(16#00FFFFFF),16#00F6EFE9,16#00F9EFE2,16#00FCF5EC,16#00FDF8F2,4(16#00FDF9F6),16#00DDCABA,
		16#009F6C43,16#00AF8463,16#00BC997E,16#00DDEDE2,16#0050BE79,16#008FD2A8,16#00E9DFD5,16#00BA9679,16#00A77852,16#00AA7C58,
		16#00ECDFD5,3(16#00FDF9F6),16#00FDF9F5,16#00FDF7EF,16#00FCF4E9,16#00FAF0E3,16#00FBF9F6,11(16#00FFFFFF),16#00E0D4C9,16#00F6E8D4,
		16#00FCF1E1,16#00FCF3E7,16#00FCF5EC,16#00FDF8F2,5(16#00FDF9F6),16#00E0CEBF,16#00BE9A7E,16#00FBF8F6,16#00B9DDC6,16#008BD7A6,
		16#00E7D9CE,16#00C3A388,16#00EBDED5,4(16#00FDF9F6),16#00FDF9F5,16#00FDF7EF,16#00FCF4EA,16#00FCF2E4,16#00FCF0DF,16#00ECDEC9,
		16#00EFEAE5,10(16#00FFFFFF),16#00D9CCC0,16#00A4805E,16#00FAEDDA,16#00FCF1E2,16#00FCF4E7,16#00FCF5EC,16#00FDF7F1,16#00FDF9F5,
		6(16#00FDF9F6),16#00D4E5D7,16#0087D2A1,6(16#00FDF9F6),16#00FDF8F4,16#00FCF6EF,16#00FCF4EA,16#00FCF2E5,16#00FCF0DF,16#00EFDFC9,
		16#009E7858,16#00F2EDEA,11(16#00FFFFFF),16#00DACDC1,16#00A4805B,16#00F9ECD9,16#00FCF1E1,16#00FCF3E6,16#00FCF5EB,16#00D5C3B3,
		16#00E9DFD6,16#00FDF9F5,4(16#00FDF9F6),16#00CDE1D1,16#0083D39F,4(16#00FDF9F6),16#00FDF9F4,16#00DBCABC,16#00E4D6C9,16#00FCF4E9,
		16#00FCF2E4,16#00FCF0DF,16#00EFDFC9,16#00A07C5C,16#00F2EDEA,13(16#00FFFFFF),16#00DCD0C5,16#00A4805E,16#00F9ECD9,16#00FCF1E0,
		16#00E6DACE,16#00F3EFEC,16#00BAA18B,16#00B09278,16#00DACABB,16#00F9F4EF,2(16#00FDF9F5),16#00C0DDC7,16#007ED19B,16#00FDF9F5,
		16#00FDF9F4,16#00F5EEE8,16#00CFBBA9,16#00AE9076,16#00CFBEB1,16#00EBE3DC,16#00EADBCA,16#00FCF0DE,16#00EEDFC9,16#009E795A,
		16#00F2EEEA,15(16#00FFFFFF),16#00DBCFC3,16#00A37F5D,16#00E2D2C1,16#00F8F6F4,2(16#00FFFFFF),16#00FBFAF9,16#00D3C4B6,16#00BEA693,
		16#00FCF6ED,16#00FCF6EE,16#00ADD5B6,16#007DD099,16#00FCF6EE,16#00F8F0E7,16#00B89E88,16#00E2D7CE,16#00FEFEFE,2(16#00FFFFFF),
		16#00ECE5DF,16#00DAC5AD,16#009F7B5C,16#00F3EFEC,17(16#00FFFFFF),16#00E1D7CE,16#00F8F5F4,5(16#00FFFFFF),16#00EDE5DD,2(16#00FCF3E6),
		16#00A2D0AB,16#0079CE94,16#00FCF3E6,16#00F9EEE1,16#00FBF8F6,5(16#00FFFFFF),16#00E6DCD4,16#00F3EFEC,25(16#00FFFFFF),16#00EDE5DD,
		16#00FCF0DE,16#00FCF0DF,16#00F4EDDC,16#00DBE5CB,16#00FCF0DE,16#00F8ECDA,16#00FBF8F6,32(16#00FFFFFF),16#00E1D5CB,5(16#00CDB497),
		16#00CCB295,16#00F9F6F4,32(16#00FFFFFF),16#00EEE9E5,5(16#00D3C4B6),16#00D3C4B7,16#00FCFBFA,56(16#00FFFFFF);

	{G:"Keys"}
	kKEY_Enter : USINT := 13;
	kKEY_LongLeft : USINT := 15;
	kKEY_Left : USINT := 8;
	kKEY_Right : USINT := 12;
	kKEY_Up : USINT := 11;
	kKEY_Down : USINT := 10;
	kKEY_LongUp : USINT := 17;
	kKEY_LongDown : USINT := 18;
	kKEY_LongEnter : USINT := 19;
	kKEY_LongRight : USINT := 16;
	kKEY_VK_F1 : USINT := 30;
	kKEY_VK_F2 : USINT := 31;
	kKEY_VK_F3 : USINT := 32;
	kKEY_VK_F4 : USINT := 33;
	kKEY_VK_F5 : USINT := 34;
	kKEY_VK_F6 : USINT := 35;
	kKEY_VK_F7 : USINT := 36;
	kKEY_VK_F8 : USINT := 37;
	kKEY_VK_F9 : USINT := 38;
	kKEY_VK_F10 : USINT := 39;

	{G:"Data types"}
	tyUndefined : USINT := 19;
	tyBool : USINT := 1;
	tySInt : USINT := 2;
	tyInt : USINT := 5;
	tyDInt : USINT := 9;
	tyLInt : USINT := 12;
	tyUSInt : USINT := 3;
	tyUInt : USINT := 6;
	tyUDInt : USINT := 10;
	tyULInt : USINT := 13;
	tyReal : USINT := 15;
	tyLReal : USINT := 16;
	tyByte : USINT := 4;
	tyWord : USINT := 7;
	tyDWord : USINT := 11;
	tyLWord : USINT := 14;
	tyString : USINT := 17;
	tyvWString : USINT := 22;
	tyvTime : USINT := 8;
	tyvLTime : USINT := 23;
	tyvDate : USINT := 24;
	tyvLDate : USINT := 25;
	tyvDateAndTime : USINT := 26;
	tyvLDateAndTime : USINT := 27;
	tyvTimeOfDay : USINT := 28;
	tyvLTimeOfDay : USINT := 29;

	{G:"Messages"}
	kWM_NULL : UINT := 0;
	kWM_KEY : UINT := 1;
	kWM_MSG : UINT := 2;
	kWM_SELECT : UINT := 3;
	kWM_PUSH : UINT := 4;
	kEV_WM_TEXTSELECT : UINT := 5;
	kEV_WM_OPENPAGE : UINT := 6;
	kEV_WM_CLOSEPAGE : UINT := 7;
	kEV_WM_CHANGESETPAGE : UINT := 8;

	{G:"Access modes"}
	kACS_IDLE : USINT := 0;
	kACS_INIT : USINT := 1;
	kACS_PRINT : USINT := 2;
	kACS_SELECT : USINT := 3;
	kACS_MODIFY : USINT := 4;
	kACS_DELETE : USINT := 5;
	kACS_QUERY : USINT := 6;
	kACS_BCKQUERY : USINT := 7;
	kACS_CLOSE : USINT := 8;
	kACS_OPEN : USINT := 9;

	{G:"Parameters and device"}
	kCOMM_PROTO_ID_LOCAL : USINT := 1;
	kCOMM_PROTO_ID_MODBUS_RTU : USINT := 2;
	kCOMM_PROTO_ID_MODBUS_TCP : USINT := 3;
	kCOMM_PROTO_ID_CANOPEN : USINT := 4;

	{G:"Resources"}
	kLangBaseLanguage : UDINT := 0;


	(*** Enumeratives: ***)

	{G:"Parameters"}
	kPAR_MSG_NOTFOUND : UINT := 103;
	kPAR_MSG_SYSERR : UINT := 106;
	kPAR_ERR_OK : UINT := 0;
	kPAR_ERR_NOTFOUND : UINT := 1;
	kPAR_ERR_INVTYPE : UINT := 3;

END_VAR

	(***************************)
	(*                         *)
	(*        PROGRAMS         *)
	(*                         *)
	(***************************)

PROGRAM PageDraw

	VAR
	res : USINT;
	END_VAR

	{CODE:ST}
	(* Locking the video *)
	res := Video_Lock( res );

	(* INIT HMI ENVIRONMENT *)
	res := Video_InitHMI( TRUE );

	(* Switching on the LCD *)
	res := Video_Switch( TRUE );

	(* Initializing the length of the call stack *)
	giStackPtr := 0;

	(* Initializing the back circular buffer indexes *)
	$giBackBufferCurr := -1;
	$giBackBufferFirst := -1;
	$giBackBufferLast := -1;

	(* Declaring the code of the keys for driving the editing mode *)
	res := Video_SetEditKey( 0, kKEY_Enter );
	res := Video_SetEditKey( 1, kKEY_LongLeft );
	res := Video_SetEditKey( 3, kKEY_Left );
	res := Video_SetEditKey( 4, kKEY_Right );
	res := Video_SetEditKey( 5, kKEY_Up );
	res := Video_SetEditKey( 6, kKEY_Down );
	res := Video_SetEditKey( 12, kKEY_LongUp );
	res := Video_SetEditKey( 13, kKEY_LongDown );

	(* *** DECLARING THE RESOURCES *** *)
	res := Video_LoadLanguage( 0, 0 );

	(* Declaring the imported fonts *)
	res := Video_AddFontUnicode( ?EWP2_6x8, EWP2_6x8_len, EWP2_6x8_hei );

	(* Declaring the system attributes of windows *)
	res := Video_SetWndSysProps( ?EWP2_6x8, 16777215, 0 );

	(* *** INITIALIZING THE OBJECTS OF PAGE 'SETUP_PR2' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'SETUP_PR1' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'SETUP_RS2' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'Pressure_page' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'Menu' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'WELCOME_PAGE' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'SETUP_IP' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'SETUP' *** *)

	(* *** INITIALIZING THE OBJECTS OF PAGE 'SETUP_RS1' *** *)

	(* Init the set elements *)
	guiCallStack[ giStackPtr ] := 0;
	WHILE TRUE DO
		CASE guiCallStack[ giStackPtr ] OF

			0:
				fbWELCOME_PAGE();


			1:
				fbSETUP_PR2();


			2:
				fbSETUP_PR1();


			3:
				fbSETUP_RS2();


			4:
				fbPressure_page();


			5:
				fbMenu();


			6:
				fbSETUP_IP();


			7:
				fbSETUP();


			8:
				fbSETUP_RS1();


		END_CASE;


	END_WHILE;


END_PROGRAM

PROGRAM PageRefresh

VAR
res : USINT;
END_VAR

	{CODE:ST}
	(* Wait for the PageDraw to start *)
	WHILE giStackPtr < 0 DO
		res := Video_Sleep(50);
	END_WHILE;

	WHILE TRUE DO
		CASE guiCallStack[ giStackPtr ] OF

			0:
				fbRefrWELCOME_PAGE();


			1:
				fbRefrSETUP_PR2();


			2:
				fbRefrSETUP_PR1();


			3:
				fbRefrSETUP_RS2();


			4:
				fbRefrPressure_page();


			5:
				fbRefrMenu();


			6:
				fbRefrSETUP_IP();


			7:
				fbRefrSETUP();


			8:
				fbRefrSETUP_RS1();


		END_CASE;

		res := Video_Sleep( 50 );

	END_WHILE;


END_PROGRAM

	(***************************)
	(*                         *)
	(*  ALARM PAGE F. BLOCKS   *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK DrawBackPage

	VAR_INPUT
		IsOpening : BOOL;
		CurrPageId : UINT;
	END_VAR
	VAR_OUTPUT
		BackPageId : UINT;
	END_VAR
	VAR_EXTERNAL
		$giBackBufferCurr : INT;
		$giBackBufferFirst : INT;
		$giBackBufferLast : INT;
		$guiBackBuffer : ARRAY[ 0..9 ] OF UINT;
	END_VAR
	{CODE:ST}

	IF IsOpening THEN

		(* Entering page *)

		(* Save this page's ID into circular back buffer *)
		$giBackBufferCurr := $giBackBufferCurr + 1;
		IF $giBackBufferCurr >= 10 THEN
			$giBackBufferCurr := 0;
		END_IF;
		$guiBackBuffer[ $giBackBufferCurr ] := CurrPageId;
		IF $giBackBufferFirst = -1 THEN
			$giBackBufferFirst := 0;
		ELSIF $giBackBufferCurr = $giBackBufferFirst AND $giBackBufferFirst <> $giBackBufferLast THEN
			$giBackBufferFirst := $giBackBufferFirst + 1;
			IF $giBackBufferFirst = 10 THEN
				$giBackBufferFirst := 0;
			END_IF;
		END_IF;

		(* Set last page's ID *)
		IF $giBackBufferCurr = $giBackBufferFirst THEN
			$giBackBufferLast := -1;
		ELSIF $giBackBufferCurr = 0 AND $giBackBufferFirst <> 9 THEN
			$giBackBufferLast := 9;
		ELSIF $giBackBufferCurr <> $giBackBufferFirst THEN
			$giBackBufferLast := $giBackBufferCurr - 1;
		ELSE
			$giBackBufferLast := -1;
		END_IF;
		IF $giBackBufferLast <> -1 THEN
			BackPageId := $guiBackBuffer[$giBackBufferLast];
		ELSE
			BackPageId := 16#FFFF;
		END_IF;

	ELSE

		(* Closing page *)
		$giBackBufferCurr := $giBackBufferCurr - 1;
		IF $giBackBufferCurr < 0 THEN
			$giBackBufferCurr := 9;
		END_IF;
		$giBackBufferCurr := $giBackBufferCurr - 1;
		IF $giBackBufferCurr < 0 THEN
			$giBackBufferCurr := 9;
		END_IF;

	END_IF;

	END_FUNCTION_BLOCK

	(***********************************)
	(*                                 *)
	(* EXPRESSIONS RESOLVER F. BLOCKS  *)
	(*                                 *)
	(***********************************)

	(***************************)
	(*                         *)
	(* PAGE-DRAWING F. BLOCKS  *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK DrawWELCOME_PAGE

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbWELCOME_PAGEImage_1 : Image;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#00;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#00;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 1;
	y1:= 14;
	x2:= 126;
	y2:= 62;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'   $D0$9B$D0$A3$D0$A6$D0$AC$D0$9A$D0$92$D0$9E$D0$94$D0$9E$D0$9A$D0$90$D0$9D$D0$90$D0$9B', 16#0100 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbWELCOME_PAGEImage_1( accMode := kACS_DELETE );
			fbWELCOME_PAGEImage_1( accMode := kACS_INIT );

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				END_CASE;
			END_IF;

		END_WHILE;

	END_WHILE;

END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawSETUP_PR2

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbSETUP_PR2String_19 : Static01;
	fbSETUP_PR2String_20 : Static01;
	fbSETUP_PR2Edit_21 : EditBox01;
	fbSETUP_PR2Edit_22 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#01;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#01;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'$D0$9D$D0$90$D0$9B$D0$90$D0$A8$D0$A2$D0$A3$D0$92$D0$90$D0$9D$D0$9D$D0$AF $D0$9F$D0$97 2', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbSETUP_PR2String_19.accMode := kACS_INIT;
			fbSETUP_PR2String_19();
			fbSETUP_PR2String_19.accMode := kACS_PRINT;
			fbSETUP_PR2String_20.accMode := kACS_INIT;
			fbSETUP_PR2String_20();
			fbSETUP_PR2String_20.accMode := kACS_PRINT;
			fbSETUP_PR2Edit_21.accMode := kACS_INIT;
			fbSETUP_PR2Edit_21();
			fbSETUP_PR2Edit_21.accMode := kACS_PRINT;
			fbSETUP_PR2Edit_22.accMode := kACS_INIT;
			fbSETUP_PR2Edit_22();
			fbSETUP_PR2Edit_22.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

						CASE iNextSel OF

							2,3:
								(* Entering the edit mode *)
								res := Video_EnterEdit( TO_UINT( iNextSel ) );

								IF res = kKEY_Up THEN

									iNextSel := TO_INT( Video_NextEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								ELSIF res = kKEY_Down THEN

									iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								END_IF;

						END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawSETUP_PR1

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbSETUP_PR1String_1 : Static01;
	fbSETUP_PR1String_3 : Static01;
	fbSETUP_PR1String_19 : Static01;
	fbSETUP_PR1String_20 : Static01;
	fbSETUP_PR1Edit_17 : EditBox01;
	fbSETUP_PR1Edit_18 : EditBox01;
	fbSETUP_PR1Edit_21 : EditBox01;
	fbSETUP_PR1Edit_22 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#02;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#02;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'$D0$9D$D0$90$D0$9B$D0$90$D0$A8$D0$A2$D0$A3$D0$92$D0$90$D0$9D$D0$9D$D0$AF $D0$9F$D0$97 1', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbSETUP_PR1String_1.accMode := kACS_INIT;
			fbSETUP_PR1String_1();
			fbSETUP_PR1String_1.accMode := kACS_PRINT;
			fbSETUP_PR1String_3.accMode := kACS_INIT;
			fbSETUP_PR1String_3();
			fbSETUP_PR1String_3.accMode := kACS_PRINT;
			fbSETUP_PR1Edit_17.accMode := kACS_INIT;
			fbSETUP_PR1Edit_17();
			fbSETUP_PR1Edit_17.accMode := kACS_PRINT;
			fbSETUP_PR1Edit_18.accMode := kACS_INIT;
			fbSETUP_PR1Edit_18();
			fbSETUP_PR1Edit_18.accMode := kACS_PRINT;
			fbSETUP_PR1String_19.accMode := kACS_INIT;
			fbSETUP_PR1String_19();
			fbSETUP_PR1String_19.accMode := kACS_PRINT;
			fbSETUP_PR1String_20.accMode := kACS_INIT;
			fbSETUP_PR1String_20();
			fbSETUP_PR1String_20.accMode := kACS_PRINT;
			fbSETUP_PR1Edit_21.accMode := kACS_INIT;
			fbSETUP_PR1Edit_21();
			fbSETUP_PR1Edit_21.accMode := kACS_PRINT;
			fbSETUP_PR1Edit_22.accMode := kACS_INIT;
			fbSETUP_PR1Edit_22();
			fbSETUP_PR1Edit_22.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

						CASE iNextSel OF

							8,9,10,11:
								(* Entering the edit mode *)
								res := Video_EnterEdit( TO_UINT( iNextSel ) );

								IF res = kKEY_Up THEN

									iNextSel := TO_INT( Video_NextEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								ELSIF res = kKEY_Down THEN

									iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								END_IF;

						END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawSETUP_RS2

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbSETUP_RS2String_1 : Static01;
	fbSETUP_RS2String_3 : Static01;
	fbSETUP_RS2String_5 : Static01;
	fbSETUP_RS2String_7 : Static01;
	fbSETUP_RS2String_9 : Static01;
	fbSETUP_RS2String_11 : Static01;
	fbSETUP_RS2Edit_12 : EditBox01;
	fbSETUP_RS2Edit_13 : EditBox01;
	fbSETUP_RS2Edit_14 : EditBox01;
	fbSETUP_RS2Edit_15 : EditBox01;
	fbSETUP_RS2Edit_16 : EditBox01;
	fbSETUP_RS2Edit_17 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#03;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#03;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'RS-485-2', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbSETUP_RS2String_1.accMode := kACS_INIT;
			fbSETUP_RS2String_1();
			fbSETUP_RS2String_1.accMode := kACS_PRINT;
			fbSETUP_RS2String_3.accMode := kACS_INIT;
			fbSETUP_RS2String_3();
			fbSETUP_RS2String_3.accMode := kACS_PRINT;
			fbSETUP_RS2String_5.accMode := kACS_INIT;
			fbSETUP_RS2String_5();
			fbSETUP_RS2String_5.accMode := kACS_PRINT;
			fbSETUP_RS2String_7.accMode := kACS_INIT;
			fbSETUP_RS2String_7();
			fbSETUP_RS2String_7.accMode := kACS_PRINT;
			fbSETUP_RS2String_9.accMode := kACS_INIT;
			fbSETUP_RS2String_9();
			fbSETUP_RS2String_9.accMode := kACS_PRINT;
			fbSETUP_RS2String_11.accMode := kACS_INIT;
			fbSETUP_RS2String_11();
			fbSETUP_RS2String_11.accMode := kACS_PRINT;
			fbSETUP_RS2Edit_12.accMode := kACS_INIT;
			fbSETUP_RS2Edit_12();
			fbSETUP_RS2Edit_12.accMode := kACS_PRINT;
			fbSETUP_RS2Edit_13.accMode := kACS_INIT;
			fbSETUP_RS2Edit_13();
			fbSETUP_RS2Edit_13.accMode := kACS_PRINT;
			fbSETUP_RS2Edit_14.accMode := kACS_INIT;
			fbSETUP_RS2Edit_14();
			fbSETUP_RS2Edit_14.accMode := kACS_PRINT;
			fbSETUP_RS2Edit_15.accMode := kACS_INIT;
			fbSETUP_RS2Edit_15();
			fbSETUP_RS2Edit_15.accMode := kACS_PRINT;
			fbSETUP_RS2Edit_16.accMode := kACS_INIT;
			fbSETUP_RS2Edit_16();
			fbSETUP_RS2Edit_16.accMode := kACS_PRINT;
			fbSETUP_RS2Edit_17.accMode := kACS_INIT;
			fbSETUP_RS2Edit_17();
			fbSETUP_RS2Edit_17.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

						CASE iNextSel OF

							18,19,20,21,22,23:
								(* Entering the edit mode *)
								res := Video_EnterEdit( TO_UINT( iNextSel ) );

								IF res = kKEY_Up THEN

									iNextSel := TO_INT( Video_NextEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								ELSIF res = kKEY_Down THEN

									iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								END_IF;

						END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawPressure_page

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbPressure_pageString_1 : Static01;
	fbPressure_pageString_3 : Static01;
	fbPressure_pageString_5 : Static01;
	fbPressure_pageString_7 : Static01;
	fbPressure_pageEdit_8 : EditBox01;
	fbPressure_pageEdit_9 : EditBox01;
	fbPressure_pageEdit_10 : EditBox01;
	fbPressure_pageEdit_11 : EditBox01;
	fbPressure_pageEdit_12 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#04;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#04;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 1;
	y1:= 14;
	x2:= 126;
	y2:= 62;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'$D0$9E$D1$81$D0$BD$D0$BE$D0$B2$D0$BDi $D0$BF$D0$B0$D1$80$D0$B0$D0$BC$D0$B5$D1$82$D1$80$D0$B8', 16#0100 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbPressure_pageString_1.accMode := kACS_INIT;
			fbPressure_pageString_1();
			fbPressure_pageString_1.accMode := kACS_PRINT;
			fbPressure_pageString_3.accMode := kACS_INIT;
			fbPressure_pageString_3();
			fbPressure_pageString_3.accMode := kACS_PRINT;
			fbPressure_pageString_5.accMode := kACS_INIT;
			fbPressure_pageString_5();
			fbPressure_pageString_5.accMode := kACS_PRINT;
			fbPressure_pageString_7.accMode := kACS_INIT;
			fbPressure_pageString_7();
			fbPressure_pageString_7.accMode := kACS_PRINT;
			fbPressure_pageEdit_8.accMode := kACS_INIT;
			fbPressure_pageEdit_8();
			fbPressure_pageEdit_8.accMode := kACS_PRINT;
			fbPressure_pageEdit_9.accMode := kACS_INIT;
			fbPressure_pageEdit_9();
			fbPressure_pageEdit_9.accMode := kACS_PRINT;
			fbPressure_pageEdit_10.accMode := kACS_INIT;
			fbPressure_pageEdit_10();
			fbPressure_pageEdit_10.accMode := kACS_PRINT;
			fbPressure_pageEdit_11.accMode := kACS_INIT;
			fbPressure_pageEdit_11();
			fbPressure_pageEdit_11.accMode := kACS_PRINT;
			fbPressure_pageEdit_12.accMode := kACS_INIT;
			fbPressure_pageEdit_12();
			fbPressure_pageEdit_12.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

						CASE iNextSel OF

							28,29,30,31,32:
								(* Entering the edit mode *)
								res := Video_EnterEdit( TO_UINT( iNextSel ) );

								IF res = kKEY_Up THEN

									iNextSel := TO_INT( Video_NextEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								ELSIF res = kKEY_Down THEN

									iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								END_IF;

						END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawMenu

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbMenuButton_1 : Button02;
	fbMenuButton_2 : Button02;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#05;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#05;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'        $D0$9C$D0$95$D0$9D$D0$AE', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbMenuButton_1.accMode := kACS_INIT;
			fbMenuButton_1();
			fbMenuButton_1.accMode := kACS_PRINT;
			fbMenuButton_2.accMode := kACS_INIT;
			fbMenuButton_2();
			fbMenuButton_2.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

								CASE iNextSel OF

									33:	(* Button: Button_1 - Action: OpenPage 'Pressure_page' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 4;
									RETURN;

									34:	(* Button: Button_2 - Action: OpenPage 'SETUP' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 7;
									RETURN;

								END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawSETUP_IP

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbSETUP_IPString_1 : Static01;
	fbSETUP_IPString_6 : Static01;
	fbSETUP_IPString_11 : Static01;
	fbSETUP_IPString_16 : Static01;
	fbSETUP_IPEdit_2 : EditBox01;
	fbSETUP_IPEdit_3 : EditBox01;
	fbSETUP_IPEdit_4 : EditBox01;
	fbSETUP_IPEdit_5 : EditBox01;
	fbSETUP_IPEdit_7 : EditBox01;
	fbSETUP_IPEdit_8 : EditBox01;
	fbSETUP_IPEdit_9 : EditBox01;
	fbSETUP_IPEdit_10 : EditBox01;
	fbSETUP_IPEdit_12 : EditBox01;
	fbSETUP_IPEdit_13 : EditBox01;
	fbSETUP_IPEdit_14 : EditBox01;
	fbSETUP_IPEdit_15 : EditBox01;
	fbSETUP_IPEdit_17 : EditBox01;
	fbSETUP_IPEdit_18 : EditBox01;
	fbSETUP_IPEdit_19 : EditBox01;
	fbSETUP_IPEdit_20 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#06;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#06;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'   $D0$9D$D0$90$D0$9B$D0$90$D0$A8$D0$A2$D0$A3$D0$92$D0$90$D0$9D$D0$9D$D0$AF IP', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbSETUP_IPString_1.accMode := kACS_INIT;
			fbSETUP_IPString_1();
			fbSETUP_IPString_1.accMode := kACS_PRINT;
			fbSETUP_IPEdit_2.accMode := kACS_INIT;
			fbSETUP_IPEdit_2();
			fbSETUP_IPEdit_2.accMode := kACS_PRINT;
			fbSETUP_IPEdit_3.accMode := kACS_INIT;
			fbSETUP_IPEdit_3();
			fbSETUP_IPEdit_3.accMode := kACS_PRINT;
			fbSETUP_IPEdit_4.accMode := kACS_INIT;
			fbSETUP_IPEdit_4();
			fbSETUP_IPEdit_4.accMode := kACS_PRINT;
			fbSETUP_IPEdit_5.accMode := kACS_INIT;
			fbSETUP_IPEdit_5();
			fbSETUP_IPEdit_5.accMode := kACS_PRINT;
			fbSETUP_IPString_6.accMode := kACS_INIT;
			fbSETUP_IPString_6();
			fbSETUP_IPString_6.accMode := kACS_PRINT;
			fbSETUP_IPEdit_7.accMode := kACS_INIT;
			fbSETUP_IPEdit_7();
			fbSETUP_IPEdit_7.accMode := kACS_PRINT;
			fbSETUP_IPEdit_8.accMode := kACS_INIT;
			fbSETUP_IPEdit_8();
			fbSETUP_IPEdit_8.accMode := kACS_PRINT;
			fbSETUP_IPEdit_9.accMode := kACS_INIT;
			fbSETUP_IPEdit_9();
			fbSETUP_IPEdit_9.accMode := kACS_PRINT;
			fbSETUP_IPEdit_10.accMode := kACS_INIT;
			fbSETUP_IPEdit_10();
			fbSETUP_IPEdit_10.accMode := kACS_PRINT;
			fbSETUP_IPString_11.accMode := kACS_INIT;
			fbSETUP_IPString_11();
			fbSETUP_IPString_11.accMode := kACS_PRINT;
			fbSETUP_IPEdit_12.accMode := kACS_INIT;
			fbSETUP_IPEdit_12();
			fbSETUP_IPEdit_12.accMode := kACS_PRINT;
			fbSETUP_IPEdit_13.accMode := kACS_INIT;
			fbSETUP_IPEdit_13();
			fbSETUP_IPEdit_13.accMode := kACS_PRINT;
			fbSETUP_IPEdit_14.accMode := kACS_INIT;
			fbSETUP_IPEdit_14();
			fbSETUP_IPEdit_14.accMode := kACS_PRINT;
			fbSETUP_IPEdit_15.accMode := kACS_INIT;
			fbSETUP_IPEdit_15();
			fbSETUP_IPEdit_15.accMode := kACS_PRINT;
			fbSETUP_IPString_16.accMode := kACS_INIT;
			fbSETUP_IPString_16();
			fbSETUP_IPString_16.accMode := kACS_PRINT;
			fbSETUP_IPEdit_17.accMode := kACS_INIT;
			fbSETUP_IPEdit_17();
			fbSETUP_IPEdit_17.accMode := kACS_PRINT;
			fbSETUP_IPEdit_18.accMode := kACS_INIT;
			fbSETUP_IPEdit_18();
			fbSETUP_IPEdit_18.accMode := kACS_PRINT;
			fbSETUP_IPEdit_19.accMode := kACS_INIT;
			fbSETUP_IPEdit_19();
			fbSETUP_IPEdit_19.accMode := kACS_PRINT;
			fbSETUP_IPEdit_20.accMode := kACS_INIT;
			fbSETUP_IPEdit_20();
			fbSETUP_IPEdit_20.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

						CASE iNextSel OF

							40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55:
								(* Entering the edit mode *)
								res := Video_EnterEdit( TO_UINT( iNextSel ) );

								IF res = kKEY_Up THEN

									iNextSel := TO_INT( Video_NextEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								ELSIF res = kKEY_Down THEN

									iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								END_IF;

						END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawSETUP

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbSETUPButton_1 : Button02;
	fbSETUPButton_2 : Button02;
	fbSETUPButton_3 : Button02;
	fbSETUPButton_4 : Button02;
	fbSETUPButton_5 : Button02;
	fbSETUPButton_6 : Button02;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#07;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#07;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'    $D0$9D$D0$90$D0$9B$D0$90$D0$A8$D0$A2$D0$A3$D0$92$D0$90$D0$9D$D0$9D$D0$AF', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbSETUPButton_1.accMode := kACS_INIT;
			fbSETUPButton_1();
			fbSETUPButton_1.accMode := kACS_PRINT;
			fbSETUPButton_2.accMode := kACS_INIT;
			fbSETUPButton_2();
			fbSETUPButton_2.accMode := kACS_PRINT;
			fbSETUPButton_3.accMode := kACS_INIT;
			fbSETUPButton_3();
			fbSETUPButton_3.accMode := kACS_PRINT;
			fbSETUPButton_4.accMode := kACS_INIT;
			fbSETUPButton_4();
			fbSETUPButton_4.accMode := kACS_PRINT;
			fbSETUPButton_5.accMode := kACS_INIT;
			fbSETUPButton_5();
			fbSETUPButton_5.accMode := kACS_PRINT;
			fbSETUPButton_6.accMode := kACS_INIT;
			fbSETUPButton_6();
			fbSETUPButton_6.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

								CASE iNextSel OF

									56:	(* Button: Button_1 - Action: OpenPage 'SETUP_IP' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 6;
									RETURN;

									57:	(* Button: Button_2 - Action: OpenPage 'SETUP_RS1' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 8;
									RETURN;

									58:	(* Button: Button_3 - Action: OpenPage 'SETUP_RS2' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 3;
									RETURN;

									60:	(* Button: Button_5 - Action: OpenPage 'SETUP_PR1' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 2;
									RETURN;

									61:	(* Button: Button_6 - Action: OpenPage 'SETUP_PR2' *)
									res := Video_Lock( res );
									guiCallStack[ giStackPtr ] := 1;
									RETURN;

								END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

FUNCTION_BLOCK DrawSETUP_RS1

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbSETUP_RS1String_1 : Static01;
	fbSETUP_RS1String_3 : Static01;
	fbSETUP_RS1String_5 : Static01;
	fbSETUP_RS1String_7 : Static01;
	fbSETUP_RS1String_9 : Static01;
	fbSETUP_RS1String_11 : Static01;
	fbSETUP_RS1Edit_2 : EditBox01;
	fbSETUP_RS1Edit_4 : EditBox01;
	fbSETUP_RS1Edit_6 : EditBox01;
	fbSETUP_RS1Edit_8 : EditBox01;
	fbSETUP_RS1Edit_10 : EditBox01;
	fbSETUP_RS1Edit_12 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#08;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#08;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 13;
	x2:= 127;
	y2:= 63;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 127, 63, ?'RS-485-1', 16#0103 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 16777215 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbSETUP_RS1String_1.accMode := kACS_INIT;
			fbSETUP_RS1String_1();
			fbSETUP_RS1String_1.accMode := kACS_PRINT;
			fbSETUP_RS1Edit_2.accMode := kACS_INIT;
			fbSETUP_RS1Edit_2();
			fbSETUP_RS1Edit_2.accMode := kACS_PRINT;
			fbSETUP_RS1String_3.accMode := kACS_INIT;
			fbSETUP_RS1String_3();
			fbSETUP_RS1String_3.accMode := kACS_PRINT;
			fbSETUP_RS1Edit_4.accMode := kACS_INIT;
			fbSETUP_RS1Edit_4();
			fbSETUP_RS1Edit_4.accMode := kACS_PRINT;
			fbSETUP_RS1String_5.accMode := kACS_INIT;
			fbSETUP_RS1String_5();
			fbSETUP_RS1String_5.accMode := kACS_PRINT;
			fbSETUP_RS1Edit_6.accMode := kACS_INIT;
			fbSETUP_RS1Edit_6();
			fbSETUP_RS1Edit_6.accMode := kACS_PRINT;
			fbSETUP_RS1String_7.accMode := kACS_INIT;
			fbSETUP_RS1String_7();
			fbSETUP_RS1String_7.accMode := kACS_PRINT;
			fbSETUP_RS1Edit_8.accMode := kACS_INIT;
			fbSETUP_RS1Edit_8();
			fbSETUP_RS1Edit_8.accMode := kACS_PRINT;
			fbSETUP_RS1String_9.accMode := kACS_INIT;
			fbSETUP_RS1String_9();
			fbSETUP_RS1String_9.accMode := kACS_PRINT;
			fbSETUP_RS1Edit_10.accMode := kACS_INIT;
			fbSETUP_RS1Edit_10();
			fbSETUP_RS1Edit_10.accMode := kACS_PRINT;
			fbSETUP_RS1String_11.accMode := kACS_INIT;
			fbSETUP_RS1String_11();
			fbSETUP_RS1String_11.accMode := kACS_PRINT;
			fbSETUP_RS1Edit_12.accMode := kACS_INIT;
			fbSETUP_RS1Edit_12();
			fbSETUP_RS1Edit_12.accMode := kACS_PRINT;

			(* Select the first selectable control *)
			iNextSel := Video_FirstLastEdit( TRUE, FALSE );
			IF iNextSel > -1 THEN
				res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
			END_IF;


		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE TRUE DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

					CASE key OF

					13:	(* Key: Enter - Action: Edit *)

						CASE iNextSel OF

							68,69,70,71,72,73:
								(* Entering the edit mode *)
								res := Video_EnterEdit( TO_UINT( iNextSel ) );

								IF res = kKEY_Up THEN

									iNextSel := TO_INT( Video_NextEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								ELSIF res = kKEY_Down THEN

									iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
									IF iNextSel > -1 THEN
										res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
									END_IF;

								END_IF;

						END_CASE;

					11:	(* Key: Up - Action: PrevField *)
						iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					10:	(* Key: Down - Action: NextField *)
						iNextSel := TO_INT( Video_NextEdit( TRUE ) );
						IF iNextSel > -1 THEN
							res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
						END_IF;

					8:	(* Key: Left - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 0;
					RETURN;

					12:	(* Key: Right - Action: OpenPage *)
					res := Video_Lock( res );
					guiCallStack[ giStackPtr ] := 5;
					RETURN;

					END_CASE;

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					(* Only select the object *)
					res := Video_EnterEditSel( TO_UINT( iNextSel ), TRUE );

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

	(***************************)
	(*                         *)
	(* REFRESHING FUN. BLOCKS  *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK RefrWELCOME_PAGE

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbWELCOME_PAGEImage_1 : Image;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#00 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			fbWELCOME_PAGEImage_1( accMode := kACS_QUERY );
			IF fbWELCOME_PAGEImage_1.reqRefr THEN
				 rx1 := 47;
				 rx2 := 87;
				 ry1 := 18;
				 ry2 := 58;
				pDC := Video_InitBmpTreeRefresh( rx1, ry1, rx2, ry2 );
				fbWELCOME_PAGEImage_1( accMode := kACS_DELETE );
				fbWELCOME_PAGEImage_1( accMode := kACS_PRINT );
				pDC := Video_EndBmpTreeRefresh( pDC, rx1, ry1, rx2, ry2 );
			END_IF;

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#00
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrSETUP_PR2

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbSETUP_PR2String_19 : Static01;
	fbSETUP_PR2String_20 : Static01;
	fbSETUP_PR2Edit_21 : EditBox01;
	fbSETUP_PR2Edit_22 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#01 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			IF fbSETUP_PR2Edit_21.accMode <> kACS_MODIFY THEN
				fbSETUP_PR2Edit_21();
			END_IF;
			IF fbSETUP_PR2Edit_22.accMode <> kACS_MODIFY THEN
				fbSETUP_PR2Edit_22();
			END_IF;

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#01
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrSETUP_PR1

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbSETUP_PR1String_1 : Static01;
	fbSETUP_PR1String_3 : Static01;
	fbSETUP_PR1String_19 : Static01;
	fbSETUP_PR1String_20 : Static01;
	fbSETUP_PR1Edit_17 : EditBox01;
	fbSETUP_PR1Edit_18 : EditBox01;
	fbSETUP_PR1Edit_21 : EditBox01;
	fbSETUP_PR1Edit_22 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#02 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			IF fbSETUP_PR1Edit_17.accMode <> kACS_MODIFY THEN
				fbSETUP_PR1Edit_17();
			END_IF;
			IF fbSETUP_PR1Edit_18.accMode <> kACS_MODIFY THEN
				fbSETUP_PR1Edit_18();
			END_IF;
			IF fbSETUP_PR1Edit_21.accMode <> kACS_MODIFY THEN
				fbSETUP_PR1Edit_21();
			END_IF;
			IF fbSETUP_PR1Edit_22.accMode <> kACS_MODIFY THEN
				fbSETUP_PR1Edit_22();
			END_IF;

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#02
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrSETUP_RS2

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbSETUP_RS2String_1 : Static01;
	fbSETUP_RS2String_3 : Static01;
	fbSETUP_RS2String_5 : Static01;
	fbSETUP_RS2String_7 : Static01;
	fbSETUP_RS2String_9 : Static01;
	fbSETUP_RS2String_11 : Static01;
	fbSETUP_RS2Edit_12 : EditBox01;
	fbSETUP_RS2Edit_13 : EditBox01;
	fbSETUP_RS2Edit_14 : EditBox01;
	fbSETUP_RS2Edit_15 : EditBox01;
	fbSETUP_RS2Edit_16 : EditBox01;
	fbSETUP_RS2Edit_17 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#03 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			IF fbSETUP_RS2Edit_12.accMode <> kACS_MODIFY THEN
				fbSETUP_RS2Edit_12();
			END_IF;
			IF fbSETUP_RS2Edit_13.accMode <> kACS_MODIFY THEN
				fbSETUP_RS2Edit_13();
			END_IF;
			IF fbSETUP_RS2Edit_14.accMode <> kACS_MODIFY THEN
				fbSETUP_RS2Edit_14();
			END_IF;
			IF fbSETUP_RS2Edit_15.accMode <> kACS_MODIFY THEN
				fbSETUP_RS2Edit_15();
			END_IF;
			IF fbSETUP_RS2Edit_16.accMode <> kACS_MODIFY THEN
				fbSETUP_RS2Edit_16();
			END_IF;
			IF fbSETUP_RS2Edit_17.accMode <> kACS_MODIFY THEN
				fbSETUP_RS2Edit_17();
			END_IF;

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#03
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrPressure_page

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbPressure_pageString_1 : Static01;
	fbPressure_pageString_3 : Static01;
	fbPressure_pageString_5 : Static01;
	fbPressure_pageString_7 : Static01;
	fbPressure_pageEdit_8 : EditBox01;
	fbPressure_pageEdit_9 : EditBox01;
	fbPressure_pageEdit_10 : EditBox01;
	fbPressure_pageEdit_11 : EditBox01;
	fbPressure_pageEdit_12 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#04 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			fbPressure_pageEdit_8();
			fbPressure_pageEdit_9();
			fbPressure_pageEdit_10();
			fbPressure_pageEdit_11();
			fbPressure_pageEdit_12();

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#04
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrMenu

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbMenuButton_1 : Button02;
	fbMenuButton_2 : Button02;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#05 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#05
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrSETUP_IP

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbSETUP_IPString_1 : Static01;
	fbSETUP_IPString_6 : Static01;
	fbSETUP_IPString_11 : Static01;
	fbSETUP_IPString_16 : Static01;
	fbSETUP_IPEdit_2 : EditBox01;
	fbSETUP_IPEdit_3 : EditBox01;
	fbSETUP_IPEdit_4 : EditBox01;
	fbSETUP_IPEdit_5 : EditBox01;
	fbSETUP_IPEdit_7 : EditBox01;
	fbSETUP_IPEdit_8 : EditBox01;
	fbSETUP_IPEdit_9 : EditBox01;
	fbSETUP_IPEdit_10 : EditBox01;
	fbSETUP_IPEdit_12 : EditBox01;
	fbSETUP_IPEdit_13 : EditBox01;
	fbSETUP_IPEdit_14 : EditBox01;
	fbSETUP_IPEdit_15 : EditBox01;
	fbSETUP_IPEdit_17 : EditBox01;
	fbSETUP_IPEdit_18 : EditBox01;
	fbSETUP_IPEdit_19 : EditBox01;
	fbSETUP_IPEdit_20 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#06 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			IF fbSETUP_IPEdit_2.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_2();
			END_IF;
			IF fbSETUP_IPEdit_3.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_3();
			END_IF;
			IF fbSETUP_IPEdit_4.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_4();
			END_IF;
			IF fbSETUP_IPEdit_5.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_5();
			END_IF;
			IF fbSETUP_IPEdit_7.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_7();
			END_IF;
			IF fbSETUP_IPEdit_8.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_8();
			END_IF;
			IF fbSETUP_IPEdit_9.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_9();
			END_IF;
			IF fbSETUP_IPEdit_10.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_10();
			END_IF;
			IF fbSETUP_IPEdit_12.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_12();
			END_IF;
			IF fbSETUP_IPEdit_13.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_13();
			END_IF;
			IF fbSETUP_IPEdit_14.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_14();
			END_IF;
			IF fbSETUP_IPEdit_15.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_15();
			END_IF;
			IF fbSETUP_IPEdit_17.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_17();
			END_IF;
			IF fbSETUP_IPEdit_18.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_18();
			END_IF;
			IF fbSETUP_IPEdit_19.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_19();
			END_IF;
			IF fbSETUP_IPEdit_20.accMode <> kACS_MODIFY THEN
				fbSETUP_IPEdit_20();
			END_IF;

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#06
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrSETUP

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbSETUPButton_1 : Button02;
	fbSETUPButton_2 : Button02;
	fbSETUPButton_3 : Button02;
	fbSETUPButton_4 : Button02;
	fbSETUPButton_5 : Button02;
	fbSETUPButton_6 : Button02;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#07 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#07
	END_REPEAT;

END_FUNCTION_BLOCK

FUNCTION_BLOCK RefrSETUP_RS1

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbSETUP_RS1String_1 : Static01;
	fbSETUP_RS1String_3 : Static01;
	fbSETUP_RS1String_5 : Static01;
	fbSETUP_RS1String_7 : Static01;
	fbSETUP_RS1String_9 : Static01;
	fbSETUP_RS1String_11 : Static01;
	fbSETUP_RS1Edit_2 : EditBox01;
	fbSETUP_RS1Edit_4 : EditBox01;
	fbSETUP_RS1Edit_6 : EditBox01;
	fbSETUP_RS1Edit_8 : EditBox01;
	fbSETUP_RS1Edit_10 : EditBox01;
	fbSETUP_RS1Edit_12 : EditBox01;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#08 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)
			IF fbSETUP_RS1Edit_2.accMode <> kACS_MODIFY THEN
				fbSETUP_RS1Edit_2();
			END_IF;
			IF fbSETUP_RS1Edit_4.accMode <> kACS_MODIFY THEN
				fbSETUP_RS1Edit_4();
			END_IF;
			IF fbSETUP_RS1Edit_6.accMode <> kACS_MODIFY THEN
				fbSETUP_RS1Edit_6();
			END_IF;
			IF fbSETUP_RS1Edit_8.accMode <> kACS_MODIFY THEN
				fbSETUP_RS1Edit_8();
			END_IF;
			IF fbSETUP_RS1Edit_10.accMode <> kACS_MODIFY THEN
				fbSETUP_RS1Edit_10();
			END_IF;
			IF fbSETUP_RS1Edit_12.accMode <> kACS_MODIFY THEN
				fbSETUP_RS1Edit_12();
			END_IF;

			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#08
	END_REPEAT;

END_FUNCTION_BLOCK

	(***************************)
	(*                         *)
	(* PARAMETER  FUN. BLOCKS  *)
	(*                         *)
	(***************************)

	(***************************)
	(*                         *)
	(*   PROC FUNCTIONS        *)
	(*                         *)
	(***************************)

